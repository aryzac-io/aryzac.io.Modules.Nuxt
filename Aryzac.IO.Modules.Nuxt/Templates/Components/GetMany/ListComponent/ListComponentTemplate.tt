<#@ template language="C#" inherits="IntentTemplateBase<Intent.Modelers.Types.ServiceProxies.Api.OperationModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Types.ServiceProxies.Api" #>
<#@ import namespace="Intent.Modules.Metadata.WebApi.Models" #>
<#
    var endpoint = GetEndpoint();
#>
<script setup lang="ts">
import { <#= GetResponseClassName() #> } from '~/structs/models/<#= GetServiceName() #>/<#= GetDTOModelName() #>.dto';

const props = withDefaults(defineProps<{
<# 
    foreach (var input in endpoint.Inputs.Where(x => x.Source == HttpInputSource.FromRoute)) 
    { 
#>
    <#= GetInputName(input) #>: <#= this.GetTypeName(GetInputType(input)) #>,
<# 
    } 
#>
<# 
    foreach (var input in endpoint.Inputs.Where(x => x.Source == HttpInputSource.FromHeader)) 
    { 
#>
    <#= GetInputName(input) #>: <#= this.GetTypeName(GetInputType(input)) #>,
<# 
    } 
#>
<# 
    foreach (var input in endpoint.Inputs.Where(x => x.Source == HttpInputSource.FromQuery)) 
    { 
#>
    <#= GetInputName(input) #>: <#= this.GetTypeName(GetInputType(input)) #>,
<# 
    } 
#>
    items: <#= GetResponseClassName() #>[],
    navigateToPath: string
}>(), {
    navigateToPath: '/'
});

const <#= GetComposableServiceName().ToCamelCase() #>Proxy = use<#= GetComposableServiceName().ToPascalCase() #>Proxy();

// Navigate to the given URL
const navigate = async (e) => {
    await navigateTo(`${props.navigateToPath}/${e.item.id}`);
}
</script>

<template>

    <ui-view-list :items="items"
                  @item-clicked="navigate">
        <template #default="{ item, index }">
            <<#= GetServicePath() #>-<#= Model.Name.ToKebabCase() #>-list-item :item="item" />
        </template>
    </ui-view-list>

</template>