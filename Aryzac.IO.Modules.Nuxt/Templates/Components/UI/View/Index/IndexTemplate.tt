<#@ template language="C#" inherits="IntentTemplateBase<object>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<script setup>
// Props definition
const props = defineProps({
  loading: {
    type: Boolean,
    default: () => false,
  },
  items: {
    type: Array,
    default: () => [],
  },
  config: {
    type: Array,
    default: () => [],
  },
  actions: {
    type: Array,
    default: () => [],
  },
});

const { loading, items, config, actions } = toRefs(props);

// Use the config prop to generate the views
const views = config.value.map((view) => ({
  slotName: view.name || "defaultSlotName",
  label: view.label || "defaultLabel",
  icon: view.icon || "defaultIconName",
}));

const currentView = ref(views[0].slotName); // default to the first view

const tabs = views.map((view) => ({
  name: view.label,
  icon: view.icon,
  current: currentView.value === view.slotName,
  href: "#" + view.slotName,
}));

const changeView = (tab) => {
  currentView.value = tab.slotName;
};

const emit = defineEmits();

const load = () => {
  emit("load-more");
};
</script>

<template>
  <div class="flex flex-col">
    <!-- Use flex-col to stack children vertically -->

    <!-- Tabs and Actions -->
    <div
      class="w-full flex items-center justify-between p-2 border-b border-gray-200"
    >
      <!-- Flex container to layout tabs and action buttons -->

      <!-- Tabs component -->
      <div class="flex-grow">
        <div class="sm:hidden">
          <label for="tabs" class="sr-only">Select a tab</label>
          <select
            id="tabs"
            name="tabs"
            class="block w-full rounded-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500"
          >
            <option v-for="tab in tabs" :key="tab.name" :selected="tab.current">
              {{ tab.name }}
            </option>
          </select>
        </div>
        <div class="hidden sm:block">
          <nav class="-mb-px flex space-x-8" aria-label="Tabs">
            <a
              v-for="tab in tabs"
              :key="tab.name"
              :href="tab.href"
              @click.prevent="changeView(tab)"
              :class="[
                tab.current
                  ? 'border-indigo-500 text-indigo-600'
                  : 'border-transparent text-gray-500 hover:border-gray-300 hover:text-gray-700',
                'group inline-flex items-center border-b-2 py-2 px-4 text-sm font-medium',
              ]"
              :aria-current="tab.current ? 'page' : undefined"
            >
              <icon
                :name="tab.icon"
                :class="[
                  tab.current
                    ? 'text-indigo-500'
                    : 'text-gray-400 group-hover:text-gray-500',
                  '-ml-0.5 mr-2 h-5 w-5',
                ]"
                aria-hidden="true"
              />
              <span>{{ tab.name }}</span>
            </a>
          </nav>
        </div>
      </div>

      <!-- Actions for quick tasks -->
      <div class="space-x-4">
        <button
          type="button"
          v-for="action in actions"
          :key="action.label"
          @click="action.function"
          class="inline-flex items-center gap-x-1.5 rounded-md bg-indigo-600 px-2.5 py-1.5 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
        >
          <icon
            :name="action.icon"
            class="-ml-0.5 h-5 w-5"
            aria-hidden="true"
          />
          {{ action.label }}
        </button>
      </div>
    </div>

    <!-- Content area for the views -->
    <div class="flex-grow p-4 w-full">
      <!-- Ensure the content container takes the full width -->
      <div v-for="view in views" :key="view.slotName">
        <!-- Content slots -->
        <slot
          v-if="currentView === view.slotName"
          :name="view.slotName"
          :items="items"
        ></slot>

        <!-- Loading progress -->
        <div v-if="loading && currentView === view.slotName">
          <slot :name="`${view.slotName}-loader`">
            <div class="w-full h-1 bg-blue-200">
              <div class="h-1 bg-blue-500 animate-pulse"></div>
            </div>
          </slot>
        </div>
      </div>
    </div>
  </div>
</template>
