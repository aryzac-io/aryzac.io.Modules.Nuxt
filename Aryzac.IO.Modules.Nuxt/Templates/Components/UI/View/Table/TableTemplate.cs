// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Aryzac.IO.Modules.Nuxt.Templates.Components.UI.View.Table
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\src\aryzac-io\aryzac.io.Modules.Nuxt\Aryzac.IO.Modules.Nuxt\Templates\Components\UI\View\Table\TableTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class TableTemplate : IntentTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("<script setup>\r\n// Props definition\r\nconst props = defineProps({\r\n    items: {\r\n " +
                    "       type: Array,\r\n        default: () => []\r\n    },\r\n    headers: {\r\n        " +
                    "type: Array,\r\n        default: () => []\r\n    },\r\n    key: {\r\n        type: [Stri" +
                    "ng, Function],\r\n        default: null,\r\n    }\r\n});\r\n\r\nconst getKey = (item, inde" +
                    "x) => {\r\n    if (typeof key.value === \'function\') {\r\n        return key.value(it" +
                    "em);\r\n    } else if (typeof key.value === \'string\' && item[key.value] !== undefi" +
                    "ned) {\r\n        return item[key.value];\r\n    } else {\r\n        console.warn(`A v" +
                    "alid key could not be determined for the table item at index ${index}. Falling b" +
                    "ack to index. Consider providing a valid key prop.`);\r\n        return index;\r\n  " +
                    "  }\r\n}\r\n</script>\r\n\r\n<template>\r\n    <div class=\"mt-8 flow-root\">\r\n        <div " +
                    "class=\"-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\r\n            <div class=\"" +
                    "inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8\">\r\n                <ta" +
                    "ble class=\"min-w-full divide-y divide-gray-300\">\r\n                    <thead>\r\n " +
                    "                       <tr>\r\n                            <th v-for=\"header in he" +
                    "aders\"\r\n                                :key=\"header.key\"\r\n                     " +
                    "           class=\"py-3.5 px-3 text-left text-sm font-semibold text-gray-900\">\r\n " +
                    "                               {{ header.label }}\r\n                            <" +
                    "/th>\r\n                            <th scope=\"col\"\r\n                             " +
                    "   class=\"relative py-3.5 pl-3 pr-4 sm:pr-0\">\r\n                                <" +
                    "span class=\"sr-only\">Edit</span>\r\n                            </th>\r\n           " +
                    "             </tr>\r\n                    </thead>\r\n                    <tbody cla" +
                    "ss=\"divide-y divide-gray-200\">\r\n                        <tr v-for=\"(item, index)" +
                    " in items\"\r\n                            :key=\"getKey(item, index)\">\r\n           " +
                    "                 <td v-for=\"header in headers\"\r\n                                " +
                    ":key=\"header.key\"\r\n                                class=\"whitespace-nowrap px-3" +
                    " py-4 text-sm\">\r\n                                <template v-if=\"header.template" +
                    "\">\r\n                                    <slot :name=\"header.template\"\r\n         " +
                    "                                 :item=\"item\" />\r\n                              " +
                    "  </template>\r\n                                <template v-else>\r\n              " +
                    "                      {{ item[header.key] }}\r\n                                </" +
                    "template>\r\n                            </td>\r\n                            <td\r\n " +
                    "                               class=\"relative whitespace-nowrap py-4 pl-3 pr-4 " +
                    "text-right text-sm font-medium sm:pr-0\">\r\n                                <a hre" +
                    "f=\"#\"\r\n                                   class=\"text-indigo-600 hover:text-indi" +
                    "go-900\">\r\n                                    Edit<span class=\"sr-only\">, {{ get" +
                    "Key(item,\r\n                                        index) }}</span>\r\n           " +
                    "                     </a>\r\n                            </td>\r\n                  " +
                    "      </tr>\r\n                    </tbody>\r\n                </table>\r\n           " +
                    " </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n  \r\n  \r\n  ");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
