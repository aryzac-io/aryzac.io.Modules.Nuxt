// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Aryzac.IO.Modules.Nuxt.Templates.Components.UI.View.List
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\src\aryzac-io\aryzac.io.Modules.Nuxt\Aryzac.IO.Modules.Nuxt\Templates\Components\UI\View\List\ListTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ListTemplate : IntentTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"<script setup>
const props = defineProps({
  items: {
    type: Array,
    default: () => [],
    validator: (items) => items.every(item => typeof item === 'object')
  },
  key: {
    type: [String, Function],
    default: null,
  }
});

const emit = defineEmits([
  'itemClicked'
]);

const { key, items } = toRefs(props);

const getKey = (item, index) => {
  if (typeof key.value === 'function') {
    return key.value(item);
  } else if (typeof key.value === 'string' && item[key.value] !== undefined) {
    return item[key.value];
  } else {
    console.warn(`A valid key could not be determined for the list item at index ${index}. Falling back to index. Consider providing a valid key prop.`);
    return index;
  }
}

const handleItemClicked = (item, index) => {
  emit('itemClicked', { item, index });
}
</script>

<template>
  <ul role=""list""
      class=""divide-y divide-gray-100"">
    <li v-for=""(item, index) in items""
        :key=""getKey(item, index)""
        class=""relative flex items-center justify-between gap-x-6 py-5 hover:bg-gray-50 cursor-pointer""
        @click=""handleItemClicked(item, index)"">
      <slot v-bind=""{ item, index }""></slot>
    </li>
  </ul>
</template>
");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
